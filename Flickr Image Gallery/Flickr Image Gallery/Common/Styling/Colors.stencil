// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if palettes %}
import UIKit.UIColor

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length

extension UIColor {

  convenience init(rgbaValue: UInt32) {
    let red   = CGFloat((rgbaValue >> 24) & 0xff) / 255.0
    let green = CGFloat((rgbaValue >> 16) & 0xff) / 255.0
    let blue  = CGFloat((rgbaValue >>  8) & 0xff) / 255.0
    let alpha = CGFloat((rgbaValue      ) & 0xff) / 255.0

    self.init(red: red, green: green, blue: blue, alpha: alpha)
  }
}

// swiftlint:disable identifier_name line_length type_body_length

struct ColorName: ColorProvider {
  let rgbaValue: UInt32
  var color: UIColor { return UIColor(named: self) }

{% macro rgbaValue color %}0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}}{% endmacro %}
{% macro enumBlock colors sp %}
{{sp}}  {% for color in colors %}
{{sp}}  /// 0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}} (r: {{color.red|hexToInt}}, g: {{color.green|hexToInt}}, b: {{color.blue|hexToInt}}, a: {{color.alpha|hexToInt}})
{{sp}}  static let {{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = ColorName(rgbaValue: {% call rgbaValue color %})
{{sp}}  {% endfor %}
{% endmacro %}
  {% if palettes.count > 1 %}
  {% for palette in palettes %}
  enum {{palette.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% call enumBlock palette.colors "  " %}
  }
  {% endfor %}
  {% else %}
  {% call enumBlock palettes.first.colors "" %}
  {% endif %}
}
// swiftlint:enable identifier_name line_length type_body_length

extension UIColor {
  convenience init(named color: ColorName) {
    self.init(rgbaValue: color.rgbaValue)
  }
}
{% else %}
// No color found
{% endif %}
